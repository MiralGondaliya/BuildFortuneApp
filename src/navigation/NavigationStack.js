import React, {useEffect} from 'react';
import {NavigationContainer} from '@react-navigation/native';
import {Platform, StatusBar} from 'react-native';
import {COLORS} from '../styles/colors';
import {createStackNavigator} from '@react-navigation/stack';
import {navigationRef} from './NavigationService';
import Splash from '../screens/splash';
import Welcome from '../screens/welcome';
import Login from '../screens/login';
import Signup from '../screens/signup';
import SignupSocialMedia from '../screens/signupSocialMedia';
import ForgotPassword from '../screens/forgotPassword';
import Dashboard from '../screens/dashboard';
import SelectLanguage from '../screens/selectLanguage';
import SelectNationality from '../screens/selectNationality';
import SelectBusinessStrategy from '../screens/selectBusinessStrategy';
import SelectIndustry from '../screens/selectIndustry';
import AdsDetail from '../screens/adsDetail';
import AllCategories from '../screens/allCategories';
import AllTopAds from '../screens/allTopAds';
import ProfileSettings from '../screens/profileSettings';
import PrivacySetting from '../screens/privacySetting';
import MyAds from '../screens/myAds';
import MyPreferences from '../screens/myPreferences';
import CategoryAds from '../screens/categoryAds';
import WebContent from '../screens/webcontent';
import EditAdd from '../screens/editAdd';
import SearchAds from '../screens/searchAds';
import messaging, {firebase} from '@react-native-firebase/messaging';
import PushNotification from 'react-native-push-notification';
import PushNotificationIOS from '@react-native-community/push-notification-ios';
import Storage, {FCM_TOKEN} from '../const/storage';
import {apiCall, updateDeviceToken} from '../api';
import PaymentWebview from "../screens/paymentWebView";

const Stack = createStackNavigator();

const NavigationStack = props => {
  let unsubscribe;
  useEffect(() => {
    firebase.messaging().setAutoInitEnabled(true);
    if (Platform.OS === 'ios') {
      setTimeout(() => {
        setupIOSNotification();
        subscribe();
      }, 2000);
    } else {
      setUpNotification();
    }
    return unsubscribe && unsubscribe;
  }, []);

  const setUpNotification = async () => {
    const defaultAppMessaging = firebase.messaging();
    const token = await defaultAppMessaging.getToken();
    console.log(token);
    apiCallUpdateDeviceToken(token);

    if (!defaultAppMessaging.isDeviceRegisteredForRemoteMessages) {
      await defaultAppMessaging.registerDeviceForRemoteMessages();
    }

    messaging().onNotificationOpenedApp(remoteMessage => {
      console.log(
        'Notification caused app to open from background state:',
        remoteMessage.notification,
      );
      //Navigate to particular string
    });

    messaging()
      .getInitialNotification()
      .then(remoteMessage => {
        if (remoteMessage) {
          console.log(
            'Notification caused app to open from quit state:',
            remoteMessage.notification,
          );
          //Navigate to particular string
        }
      });

    if (Platform.OS === 'android') {
      unsubscribe = defaultAppMessaging.onMessage(async remoteMessage => {
        console.log(JSON.stringify(remoteMessage));
        console.log(remoteMessage.messageId);

        PushNotification.createChannel(
          {
            channelId: remoteMessage.messageId, // (required)
            channelName: `Custom channel - Counter: ${remoteMessage.messageId}`, // (required)
            channelDescription: `A custom channel to categorise your custom notifications. Updated at: ${Date.now()}`, // (optional) default: undefined.
            soundName: 'default', // (optional) See `soundName` parameter of `localNotification` function
            importance: 4, // (optional) default: 4. Int value of the Android notification importance
            vibrate: true, // (optional) default: true. Creates the default vibration patten if true.
          },
          created => console.log(`createChannel returned '${created}'`), // (optional) callback returns whether the channel was created, false means it already existed.
        );

        let data;
        console.log(remoteMessage.hasOwnProperty('notification'));
        if (remoteMessage.hasOwnProperty('notification')) {
          let notification = remoteMessage.notification;
          data = {message: notification.body, title: notification.title};
          console.log(data);
        } else {
          data = remoteMessage.data;
          if (data.hasOwnProperty('data')) {
            data = JSON.parse(data.data);
          }
        }

        PushNotification.localNotification({
          /* Android Only Properties */
          // id: "0", // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
          vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
          priority: 'high', // (optional) set notification priority, default: high
          importance: 4, // (optional) set notification importance, default: high
          /* iOS and Android properties */
          title: data.title, // (optional)
          message: data.message, // remoteMessage.data.message, // (required),
          channelId: remoteMessage.messageId,
          bigPictureUrl: data.image,
          tag: data?.post_id,
          data: data ?? {},
          smallIcon: 'noti',
          color: COLORS.primary,
        });
      });
    }
  };

  const subscribe = () => {
    PushNotificationIOS.getInitialNotification().then(noti => {
      console.log(noti);
      if (noti) {
        console.log(noti);
      }
    });

    PushNotificationIOS.addEventListener('notification', noti => {
      console.log(noti);
      if (noti) {
      }
    });
  };

  const setupIOSNotification = async () => {
    if (firebase.messaging().isDeviceRegisteredForRemoteMessages) {
      await firebase.messaging().registerDeviceForRemoteMessages();
    }

    firebase
      .messaging()
      .hasPermission()
      .then(enable => {
        if (enable) {
          requestForNotification();
        } else {
          firebase
            .messaging()
            .requestPermission()
            .then(() => {
              requestForNotification();
            })
            .catch(error => {
              alert('Permission Denied', error);
            });
        }
      });
  };

  const requestForNotification = () => {
    PushNotificationIOS.requestPermissions().then(permission => {
      if (permission.alert) {
        getFcmToken();
      } else {
        console.log('Error');
      }
    });
  };

  const getFcmToken = () => {
    firebase
      .messaging()
      .getToken()
      .then(fcmToken => {
        if (fcmToken) {
          console.debug('fcm token ==', fcmToken);
          apiCallUpdateDeviceToken(fcmToken);
        }
      });
  };

  const apiCallUpdateDeviceToken = token => {
    Storage.storeData(FCM_TOKEN, token);
    apiCall(
      updateDeviceToken(token),
      (data, message) => {
        console.log(data);
      },
      false,
    );
  };

  return (
    <NavigationContainer ref={navigationRef} {...props}>
      <StatusBar backgroundColor={COLORS.primary} barStyle={'light-content'} />

      <Stack.Navigator
        screenOptions={{
          headerShown: false,
        }}>
        <Stack.Screen name={'Splash'} component={Splash} />
        <Stack.Screen name={'Welcome'} component={Welcome} />
        <Stack.Screen name={'Login'} component={Login} />
        <Stack.Screen name={'Signup'} component={Signup} />
        <Stack.Screen
          name={'SignupSocialMedia'}
          component={SignupSocialMedia}
        />
        <Stack.Screen name={'ForgotPassword'} component={ForgotPassword} />
        <Stack.Screen name={'Dashboard'} component={Dashboard} />
        <Stack.Screen name={'SelectLanguage'} component={SelectLanguage} />
        <Stack.Screen
          name={'SelectNationality'}
          component={SelectNationality}
        />
        <Stack.Screen
          name={'SelectBusinessStrategy'}
          component={SelectBusinessStrategy}
        />
        <Stack.Screen name={'SelectIndustry'} component={SelectIndustry} />
        <Stack.Screen name={'AdsDetail'} component={AdsDetail} />
        <Stack.Screen name={'AllCategories'} component={AllCategories} />
        <Stack.Screen name={'AllTopAds'} component={AllTopAds} />
        <Stack.Screen name={'ProfileSettings'} component={ProfileSettings} />
        <Stack.Screen name={'PrivacySetting'} component={PrivacySetting} />
        <Stack.Screen name={'MyAds'} component={MyAds} />
        <Stack.Screen name={'MyPreferences'} component={MyPreferences} />
        <Stack.Screen name={'CategoryAds'} component={CategoryAds} />
        <Stack.Screen name={'WebContent'} component={WebContent} />
        <Stack.Screen name={'EditAdd'} component={EditAdd} />
        <Stack.Screen name={'SearchAds'} component={SearchAds} />
        <Stack.Screen name={'PaymentWebview'} component={PaymentWebview} />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default NavigationStack;
