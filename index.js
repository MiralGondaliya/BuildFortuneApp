/**
 * @format
 */
import 'react-native-gesture-handler';
import {AppRegistry, I18nManager} from 'react-native';
import App from './App';
import {name as appName} from './app.json';
import messaging from '@react-native-firebase/messaging';
import PushNotification from 'react-native-push-notification';
import {COLORS} from './src/styles/colors';

messaging().setBackgroundMessageHandler(async remoteMessage => {
  // Update a users messages list using AsyncStorage
  console.log('REMOTE' + JSON.stringify(remoteMessage));

  PushNotification.createChannel(
    {
      channelId: remoteMessage.messageId, // (required)
      channelName: `Custom channel - Counter: ${remoteMessage.messageId}`, // (required)
      channelDescription: `A custom channel to categorise your custom notifications. Updated at: ${Date.now()}`, // (optional) default: undefined.
      soundName: 'default', // (optional) See `soundName` parameter of `localNotification` function
      importance: 4, // (optional) default: 4. Int value of the Android notification importance
      vibrate: true, // (optional) default: true. Creates the default vibration patten if true.
    },
    created => console.log(`createChannel returned '${created}'`), // (optional) callback returns whether the channel was created, false means it already existed.
  );

  let data;
  console.log(remoteMessage.hasOwnProperty('notification'));
  if (remoteMessage.hasOwnProperty('notification')) {
    let notification = remoteMessage.notification;
    data = {message: notification.body, title: notification.title};
    console.log(data);
  } else {
    data = remoteMessage.data;
    if (data.hasOwnProperty('data')) {
      data = JSON.parse(data.data);
    }
  }

  PushNotification.localNotification({
    /* Android Only Properties */
    // id: "0", // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
    priority: 'high', // (optional) set notification priority, default: high
    importance: 4, // (optional) set notification importance, default: high
    /* iOS and Android properties */
    title: data.title, // (optional)
    message: data.message, //remoteMessage.data.message, // (required),
    channelId: remoteMessage.messageId,
    bigPictureUrl: data.image,
    data: data ?? {},
    smallIcon: 'noti',
    color: COLORS.primary,
  });
});
AppRegistry.registerComponent(appName, () => App);
